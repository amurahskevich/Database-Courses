// <auto-generated />
using Data.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200318133244_InitializeEntities")]
    partial class InitializeEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Contracts.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeePerMinute")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RateId")
                        .IsUnique();

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("Data.Contracts.Entities.HobbyClient", b =>
                {
                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.HasKey("HobbyId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("HobbyClients");
                });

            modelBuilder.Entity("Data.Contracts.Entities.HomeInternet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeePerMegabyte")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfMegabyte")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RateId")
                        .IsUnique();

                    b.ToTable("HomeInternets");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Internet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeePerMegabyte")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfMegabyte")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RateId")
                        .IsUnique();

                    b.ToTable("Internets");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Roaming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeePerMinute")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RateId")
                        .IsUnique();

                    b.ToTable("Roamings");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Sms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeePerSms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSms")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RateId")
                        .IsUnique();

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("Data.Contracts.Entities.Address", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Client", "Client")
                        .WithOne("Address")
                        .HasForeignKey("Data.Contracts.Entities.Address", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.Bonus", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Client", "Client")
                        .WithMany("Bonuses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.Call", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Rate", "Rate")
                        .WithOne("Call")
                        .HasForeignKey("Data.Contracts.Entities.Call", "RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.Client", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Rate", "Rate")
                        .WithMany("Clients")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.HobbyClient", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Client", "Client")
                        .WithMany("Hobbies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Contracts.Entities.Hobby", "Hobby")
                        .WithMany("Clients")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.HomeInternet", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Rate", "Rate")
                        .WithOne("HomeInternet")
                        .HasForeignKey("Data.Contracts.Entities.HomeInternet", "RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.Internet", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Rate", "Rate")
                        .WithOne("Internet")
                        .HasForeignKey("Data.Contracts.Entities.Internet", "RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.Roaming", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Rate", "Rate")
                        .WithOne("Roaming")
                        .HasForeignKey("Data.Contracts.Entities.Roaming", "RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Contracts.Entities.Sms", b =>
                {
                    b.HasOne("Data.Contracts.Entities.Rate", "Rate")
                        .WithOne("Sms")
                        .HasForeignKey("Data.Contracts.Entities.Sms", "RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
